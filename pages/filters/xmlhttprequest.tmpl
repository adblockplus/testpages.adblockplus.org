template = testcase
title = XMLHTTPRequest
description = Check that a filter using the $xmlhttprequest filter option is working as expected.

<section class="testcase-panel">
  <h2 id="xmlhttprequest">XMLHTTPRequest</h2>
  <p>Test that a filter using the $xmlhttprequest filter option works to block a XMLHTTPRequest.</p>
  <div class="testcase-area testcase-container">
    <div id="testcase-status" class="testcase-trigger blocked">Triggering XMLHTTPRequest connection...</div>
    <div class="testcase-waitingcontent blocked">Waiting 500ms to trigger script...</div>
    <div class="testcase-output-expected">Passed. Connection was blocked.</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The connection should be blocked and its state indicated in the test case above.</li>
  </ul>
  <h3>Filters</h3>
  <ul class="testcase-filters">
    <li><pre>{{ site_url|strip_proto }}/testfiles/xmlhttprequest/$xmlhttprequest</pre></li>
  </ul>
</section>

<script>
  "use strict";

  let req = new XMLHttpRequest();

  req.onerror = function(e)
  {
    let result = document.getElementById("testcase-status");
    result.innerHTML = "Passed. Connection was blocked.";
    result.className = "testcase-trigger-passed";
  };
  req.onload = function(e)
  {
    if (this.status == 200)
    {
      let result = document.getElementById("testcase-status");
      result.innerHTML = "Failed. Connection was NOT blocked.";
      result.className = "testcase-trigger-failed blocked";
    }
  };

  setTimeout(() =>
  {
    removeWaitingElements(); // eslint-disable-line no-undef

    req.open("GET", "{{ site_url }}/testfiles/xmlhttprequest/text.txt", true);
    req.send();
  }, 500);
</script>
