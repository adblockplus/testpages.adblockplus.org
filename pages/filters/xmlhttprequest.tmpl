template = testcase
title = XMLHTTPRequest
description = Check that a filter using the $xmlhttprequest filter option is working as expected.

{% set case = "XMLHTTPRequest" %}
{% set id = get_id(case) %}
<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test that a filter using the $xmlhttprequest filter option works to block a XMLHTTPRequest.</p>
  <div id="{{id}}-area" class="testcase-area">
    <div id="testcase-status" class="testcase-trigger" aria-label="trigger">Triggering XMLHTTPRequest connection...</div>
    <div class="testcase-expected-view">Passed. Connection was blocked.</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The connection should be blocked and its state indicated in the test case above.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>{{ site_url|strip_proto }}/testfiles/xmlhttprequest/$xmlhttprequest</pre></li>
  </ul>
</section>

<script>
  "use strict";

  let req = new XMLHttpRequest();

  req.onerror = function(e) {
    let result = document.getElementById("testcase-status");
    result.innerHTML = "Passed. Connection was blocked.";
    result.setAttribute("data-expectedresult", "pass");
    result.setAttribute("data-dp", "pass");
    result.setAttribute("aria-label", "{{id}}-pass");
  };
  req.onload = function(e) {
    if (this.status == 200) {
      let result = document.getElementById("testcase-status");
      result.innerHTML = "Failed. Connection was NOT blocked.";
      result.setAttribute("data-expectedresult", "fail");
      result.setAttribute("data-dp", "fail");
      result.setAttribute("aria-label", "{{id}}-fail");
    }
  };

  setTimeout(() => {
    req.open("GET", "{{ site_url }}/testfiles/xmlhttprequest/text.txt", true);
    req.send();
  }, 500);
</script>
