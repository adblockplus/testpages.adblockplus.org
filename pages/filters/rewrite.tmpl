title = Rewrite
template = testcase
description = Check that a filter using the $rewrite filter option is working as expected.

<section class="testcase-panel">
  {{ heading("Script") }}
  <p>Test that a filter using the $rewrite filter option works on a script.</p>
  <div id="rewrite-target" class="testcase-area">
    <div class="testcase-examplecontent">Example Content</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The script should be blocked and the red element should not be added to the page.</li>
  </ul>
  <h3>Filters</h3>
  <ul class="testcase-filters">
    <li><pre>||{{ site_url|strip_proto }}/testfiles/rewrite/*.js$rewrite=abp-resource:blank-js,domain={{ site_url|domain }}</pre></li>
  </ul>
</section>

<script src="/testfiles/rewrite/script.js"></script>

<section class="testcase-panel">
  {{ heading("Audio") }}
  <p>Test that a filter using the $rewrite filter option works on an audio file.</p>
  <div class="testcase-area">
    <audio id="mp3-target" class="testcase-nostyle"></audio>
    <div class="testcase-examplecontent">Example Content</div>
    <div class="testcase-expected-view">Duration:<br>0.1</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Check that the duration element shows more than one second length.</li>
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>Check that the duration element shows less than one second length.</li>
  </ul>
  <h3>Filters</h3>
  <ul class="testcase-filters">
    <li><pre>||{{ site_url|strip_proto }}/testfiles/rewrite/*.mp3$rewrite=abp-resource:blank-mp3,domain={{ site_url|domain }}</pre></li>
  </ul>
  <h3>Notes</h3>
  <p>audio/mpeg (mp3) files are not supported in Chrome 63 (requires 64+)</p>
  <p>audio/mpeg (mp3) files are not supported in Firefox 70 (requires 71+)</p>
</section>

<section class="testcase-panel">
  {{ heading("Video") }}
  <p>Test that a filter using the $rewrite filter option works on a video file.</p>
  <div class="testcase-area">
    <video id="mp4-target" style="display: none;"></video>
    <div class="testcase-examplecontent">Example Content</div>
    <div class="testcase-expected-view">Duration:<br>0</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The embedded video should be blocked.</li>
  </ul>
  <h3>Filters</h3>
  <ul class="testcase-filters">
    <li><pre>||{{ site_url|strip_proto }}/testfiles/rewrite/*.mp4$rewrite=abp-resource:blank-mp4,domain={{ site_url|domain }}</pre></li>
  </ul>
  <h3>Notes</h3>
  <p>video/mp4 files are not supported in Chrome 63 (requires 64+) nor in Chromium</p>
</section>

<script>
  "use strict";

  function printDuration(mediaElement)
  {
    let duration = document.createElement("div");
    // Truncate duration to one demical to avoid cross-browser differences
    let durationValue = Math.floor(mediaElement.duration * 10) / 10;
    duration.innerHTML = `Duration:<br>${durationValue}`;
    if (mediaElement.duration < 1)
      duration.setAttribute("data-expectedresult", "pass");
    else
      duration.setAttribute("data-expectedresult", "fail");

    mediaElement.parentNode.appendChild(duration);
  }

  function printUnsupported(mediaElement, mediaKind)
  {
    let durationElement = expectedParameter() ? // eslint-disable-line no-undef
      mediaElement.parentNode.getElementsByClassName("testcase-expected-view")[0] :
      document.createElement("div");

    durationElement.className = "testcase-waiting-content";
    durationElement.style = "display: block;";
    durationElement.innerHTML = `${mediaKind} isn't supported on this browser`;

    if (!expectedParameter()) // eslint-disable-line no-undef
      mediaElement.parentNode.appendChild(durationElement);
  }

  function manageMedia(id, kind, file)
  {
    let element = document.getElementById(id);

    if (element.canPlayType(kind) == "")
    {
      printUnsupported(element, kind);
    }
    else
    {
      element.innerHTML = `<source src="/testfiles/rewrite/${file}?${Date.now()}" type="${kind}">`;
      if (element.readyState >= 1)
        printDuration(element);
      else
        element.addEventListener("loadedmetadata", () => printDuration(element));
    }
  }

  manageMedia("mp3-target", "audio/mpeg", "audio.mp3");
  manageMedia("mp4-target", "video/mp4; codecs=\"avc1.42E01E\"", "video.mp4");
</script>
