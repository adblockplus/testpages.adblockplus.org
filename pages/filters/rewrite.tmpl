title = Rewrite
template = testcase
description = Check that a filter using the $rewrite filter option is working as expected.

{% set case = "Script" %}
{% set id = get_id(case) %}
<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test that a filter using the $rewrite filter option works on a script.</p>
  <div id="rewrite-target" class="testcase-area">
    <div class="testcase-examplecontent">Example Content</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The script should be blocked and the red element should not be added to the page.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>||{{ site_url|strip_proto }}/testfiles/rewrite/*.js$rewrite=abp-resource:blank-js,domain={{ site_url|domain }}</pre></li>
  </ul>
</section>

<script src="/testfiles/rewrite/script.js"></script>

{% set case = "Stylesheet" %}
{% set id = get_id(case) %}
<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test the blank-css $rewrite filter option.</p>
  <div id="{{id}}-area" class="testcase-area">
    <div class="testcase-examplecontent">Example Content</div>
    <div class="testcase-expected-view">Passed. Stylesheet was blocked.</div>
    <div id="stylesheet-target" data-expectedresult="fail" data-dp="fail">Failed. Stylesheet was NOT blocked.</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The stylesheet should be blocked and the red element should be visible on the page.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>||{{ site_url|strip_proto }}/testfiles/rewrite/*.css$rewrite=abp-resource:blank-css,domain={{ site_url|domain }}</pre></li>
  </ul>
</section>

<link rel="stylesheet" href="/testfiles/rewrite/stylesheet.css">

{% set case = "Subdocument" %}
{% set id = get_id(case) %}
<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test the blank-html $rewrite filter option.</p>
  <div id="{{id}}-area" class="testcase-area">
    <iframe id="subdocument-target" src="/testfiles/rewrite/subdocument.html?" style="border: 0; width: 100px; height: 100px;" data-expectedresult="fail" data-dp="fail"></iframe>
    <div class="testcase-examplecontent">Example Content</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The subdocument should be blocked and the red element should not be added to the page.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>||{{ site_url|strip_proto }}/testfiles/rewrite/*.html$rewrite=abp-resource:blank-html,domain={{ site_url|domain }}</pre></li>
  </ul>
</section>

{% set case = "Text" %}
{% set id = get_id(case) %}
<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test the blank-text $rewrite filter option.</p>
  <div id="{{id}}-area" class="testcase-area">
    <div id="text-status" class="testcase-trigger">Triggering request for text...</div>
    <div class="testcase-expected-view">Passed. Text is blank.</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The requested text should be blank and not displayed.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>||{{ site_url|strip_proto }}/testfiles/rewrite/*.txt$rewrite=abp-resource:blank-text,domain={{ site_url|domain }}</pre></li>
  </ul>
</section>

{% set case = "1x1 GIF" %}
{% set id = get_id(case) %}
<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test the 1x1-transparent-gif $rewrite filter option.</p>
  <div id="{{id}}-area" class="testcase-area">
    <div class="testcase-examplecontent">
      <img id="1x1-target" src="/testfiles/rewrite/1x1.gif" data-expectedresult="fail" data-dp="fail">
    </div>
    <div class="testcase-examplecontent">Example Content</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The red image should be blocked and the space collapsed.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>||{{ site_url|strip_proto }}/testfiles/rewrite/1x1.gif$rewrite=abp-resource:1x1-transparent-gif,domain={{ site_url|domain }}</pre></li>
  </ul>
</section>

{% set case = "2x2 PNG" %}
{% set id = get_id(case) %}
<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test the 2x2-transparent-png $rewrite filter option.</p>
  <div id="{{id}}-area" class="testcase-area">
    <div class="testcase-examplecontent">
      <img id="2x2-target" src="/testfiles/rewrite/2x2.png" data-expectedresult="fail" data-dp="fail">
    </div>
    <div class="testcase-examplecontent">Example Content</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The red image should be blocked and the space collapsed.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>||{{ site_url|strip_proto }}/testfiles/rewrite/2x2.png$rewrite=abp-resource:2x2-transparent-png,domain={{ site_url|domain }}</pre></li>
  </ul>
</section>

{% set case = "3x2 PNG" %}
{% set id = get_id(case) %}
<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test the 3x2-transparent-png $rewrite filter option.</p>
  <div id="{{id}}-area" class="testcase-area">
    <div class="testcase-examplecontent">
      <img id="3x2-target" src="/testfiles/rewrite/3x2.png" data-expectedresult="fail" data-dp="fail">
    </div>
    <div class="testcase-examplecontent">Example Content</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The red image should be blocked and the space collapsed.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>||{{ site_url|strip_proto }}/testfiles/rewrite/3x2.png$rewrite=abp-resource:3x2-transparent-png,domain={{ site_url|domain }}</pre></li>
  </ul>
</section>

{% set case = "32x32 PNG" %}
{% set id = get_id(case) %}
<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test the 32x32-transparent-png $rewrite filter option.</p>
  <div id="{{id}}-area" class="testcase-area">
    <div class="testcase-examplecontent">
      <img id="32x32-target" src="/testfiles/rewrite/32x32.png" data-expectedresult="fail" data-dp="fail">
    </div>
    <div class="testcase-examplecontent">Example Content</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The red image should be blocked and the space collapsed.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>||{{ site_url|strip_proto }}/testfiles/rewrite/32x32.png$rewrite=abp-resource:32x32-transparent-png,domain={{ site_url|domain }}</pre></li>
  </ul>
</section>

{% set case = "Audio" %}
{% set id = get_id(case) %}
<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test that a filter using the $rewrite filter option works on an audio file.</p>
  <div id="{{id}}-area" class="testcase-area">
    <audio id="mp3-target" class="testcase-nostyle"></audio>
    <div class="testcase-examplecontent">Example Content</div>
    <div class="testcase-expected-view">Duration:<br>0.1</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Check that the duration element shows more than one second length.</li>
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>Check that the duration element shows less than one second length.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>||{{ site_url|strip_proto }}/testfiles/rewrite/*.mp3$rewrite=abp-resource:blank-mp3,domain={{ site_url|domain }}</pre></li>
  </ul>
  <h3>Notes</h3>
  <p>audio/mpeg (mp3) files are not supported in Chrome 63 (requires 64+)</p>
  <p>audio/mpeg (mp3) files are not supported in Firefox 70 (requires 71+)</p>
</section>

{% set case = "Video" %}
{% set id = get_id(case) %}
<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test that a filter using the $rewrite filter option works on a video file.</p>
  <div id="{{id}}-area" class="testcase-area">
    <video id="mp4-target" style="display: none;"></video>
    <div class="testcase-examplecontent">Example Content</div>
    <div class="testcase-expected-view">Duration:<br>0</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The embedded video should be blocked.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>||{{ site_url|strip_proto }}/testfiles/rewrite/*.mp4$rewrite=abp-resource:blank-mp4,domain={{ site_url|domain }}</pre></li>
  </ul>
  <h3>Notes</h3>
  <p>video/mp4 files are not supported in Chrome 63 (requires 64+) nor in Chromium</p>
</section>

<script>
  "use strict";

  function testStylesheetRewrite() {
    let target = document.getElementById("stylesheet-target");
    let targetStyle = getComputedStyle(target);
    if (targetStyle.width === "150px") {
      target.innerHTML = "Failed. Stylesheet was NOT blocked.";
    }
    else {
      target.innerHTML = "Passed. Stylesheet was blocked.";
      target.style.display = "none";
      // Style must be equal to .testcase-expected-view,
      target.style = `flex-grow: 1;
        padding: .5rem;
        color: #fff;
        background-color: #0dc74b;`;
    }
  }

  function testSubdocumentRewrite(){
    let target = document.getElementById("subdocument-target");
    let contentDoc = null;

    // Older versions of Chrome will throw an exception here when the
    // iframe contentDocument is accessed, because the rewritten
    // subdocument is technically cross-origin.
    try {
      contentDoc = target.contentDocument;
    }
    catch (ex) {
      contentDoc = null;
    }

    if (contentDoc === null) {
      target.style.display = "none";
      target.setAttribute("data-expectedresult", "pass");
      target.setAttribute("data-dp", "pass");
      target.style.width = 0;
      target.style.flexGrow = 0;
      target.style.padding = 0;
    }
    else {
      target.setAttribute("data-expectedresult", "fail");
      target.setAttribute("data-dp", "fail");
      target.style.width = 0;
    }
  }

  function testXhrRewrite() {
    let req = new XMLHttpRequest();

    req.onerror = function(e) {
      let result = document.getElementById("text-status");
      result.innerHTML = "Passed. Text is blank.";
      result.setAttribute("data-expectedresult", "pass");
      result.setAttribute("data-dp", "pass");
    };
    req.onload = function(e) {
      let result = document.getElementById("text-status");

      if (this.status == 200) {
        if (this.responseText == "") {
          result.innerHTML = "Passed. Text is blank.";
          result.setAttribute("data-expectedresult", "pass");
          result.setAttribute("data-dp", "pass");
        }
        else {
          result.innerHTML = this.responseText;
          result.setAttribute("data-expectedresult", "fail");
          result.setAttribute("data-dp", "fail");
        }
      }
    };

    req.open("GET", "{{ site_url }}/testfiles/rewrite/text.txt", true);
    req.send();
  }

  function testImageRewriteOne() {
    let target = document.getElementById("1x1-target");

    if (target.width === 1) {
      target.setAttribute("data-expectedresult", "pass");
      target.setAttribute("data-dp", "pass");
      target.width = 0;
    }
  }

  function testImageRewriteTwo() {
    let target = document.getElementById("2x2-target");

    if (target.width === 2) {
      target.setAttribute("data-expectedresult", "pass");
      target.setAttribute("data-dp", "pass");
      target.width = 0;
    }
  }

  function testImageRewriteThree() {
    let target = document.getElementById("3x2-target");

    if (target.width === 3) {
      target.setAttribute("data-expectedresult", "pass");
      target.setAttribute("data-dp", "pass");
      target.width = 0;
    }
  }

  function testImageRewriteFour() {
    let target = document.getElementById("32x32-target");

    if (target.width === 32) {
      target.setAttribute("data-expectedresult", "pass");
      target.setAttribute("data-dp", "pass");
      target.width = 0;
    }
  }

  function printDuration(mediaElement) {
    let duration = document.createElement("div");
    // Truncate duration to one demical to avoid cross-browser differences
    let durationValue = Math.floor(mediaElement.duration * 10) / 10;
    duration.innerHTML = `Duration:<br>${durationValue}`;
    if (mediaElement.duration < 1)
      duration.setAttribute("data-expectedresult", "pass");
    else
      duration.setAttribute("data-expectedresult", "fail");

    mediaElement.parentNode.appendChild(duration);
  }

  function printUnsupported(mediaElement, mediaKind) {
    let durationElement = expectedParameter() ? // eslint-disable-line no-undef
      mediaElement.parentNode.getElementsByClassName("testcase-expected-view")[0] :
      document.createElement("div");

    durationElement.className = "testcase-waiting-content";
    durationElement.style = "display: block;";
    durationElement.innerHTML = `${mediaKind} isn't supported on this browser`;

    if (!expectedParameter()) // eslint-disable-line no-undef
      mediaElement.parentNode.appendChild(durationElement);
  }

  function manageMedia(id, kind, file) {
    let element = document.getElementById(id);

    if (element.canPlayType(kind) == "") {
      printUnsupported(element, kind);
    }
    else {
      element.innerHTML = `<source src="/testfiles/rewrite/${file}?${Date.now()}" type="${kind}">`;
      if (element.readyState >= 1)
        printDuration(element);
      else
        element.addEventListener("loadedmetadata", () => printDuration(element));
    }
  }

  function testMediaRewrite() {
    manageMedia("mp3-target", "audio/mpeg", "audio.mp3");
    if (typeof netscape != "undefined")
      setTimeout(() => manageMedia("mp4-target", "video/mp4; codecs=\"avc1.42E01E\"", "video.mp4"), 200);
    else
      manageMedia("mp4-target", "video/mp4; codecs=\"avc1.42E01E\"", "video.mp4");
  }

  window.addEventListener("load", () => {
    setTimeout(() => testStylesheetRewrite(), 0);
    setTimeout(() => testSubdocumentRewrite(), 0);
    setTimeout(() => testXhrRewrite(), 0);
    setTimeout(() => testImageRewriteOne(), 0);
    setTimeout(() => testImageRewriteTwo(), 0);
    setTimeout(() => testImageRewriteThree(), 0);
    setTimeout(() => testImageRewriteFour(), 0);
    setTimeout(() => testMediaRewrite(), 0);
  });

  if (expectedParameter()) // eslint-disable-line no-undef
    expectedPageView(); // eslint-disable-line no-undef
</script>
