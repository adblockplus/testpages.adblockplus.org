template = testcase
title = strip-fetch-query-parameter
description = Check that the strip-fetch-query-parameter snippet is working as expected.

<section class="testcase-panel">
  <h2>Basic usage</h2>
  <p>Test that basic usage of the snippet works as expected.</p>
  <div id="basic-target" class="testcase-area">
    <div class="testcase-examplecontent">Example Content</div>
    <div class="testcase-waiting-content">Waiting 500ms to trigger snippet...</div>
    <div class="testcase-expected-view">basicAllowed was called.</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The script should display a green element and not a red element to the test case above.</li>
  </ul>
  <h3>Filters</h3>
  <ul class="testcase-filters">
    <li><pre>{{ site_url|domain }}#$#strip-fetch-query-parameter basicBlocked {{ site_url|domain }}</pre></li>
  </ul>
</section>

<section class="testcase-panel">
  <h2>Other usage</h2>
  <p>Test that other usage of the snippet works as expected.</p>
  <div id="other-target" class="testcase-area">
    <div class="testcase-examplecontent">Example Content</div>
    <div class="testcase-waiting-content">Waiting 500ms to trigger snippet...</div>
    <div class="testcase-expected-view">otherAllowed1 was called.</div>
    <div class="testcase-expected-view">otherAllowed2 was called.</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The script should display two green elements to the test case above.</li>
  </ul>
  <h3>Filters</h3>
  <ul class="testcase-filters">
    <li><pre>{{ site_url|domain }}#$#strip-fetch-query-parameter otherAllowed2 other-domain</pre></li>
  </ul>
</section>


<script>
  "use strict";

  function handleResponseBasic(response)
  {
    if (response.url.includes("basicBlocked"))
    {
      let element = document.createElement("div");
      element.setAttribute("data-expectedresult", "fail");
      element.innerHTML = "Failed. basicBlocked was called.";
      document.getElementById("basic-target").appendChild(element);
    }
    if (response.url.includes("basicAllowed"))
    {
      let element = document.createElement("div");
      element.setAttribute("data-expectedresult", "pass");
      element.innerHTML = "basicAllowed was called.";
      document.getElementById("basic-target").appendChild(element);
    }
  }

  function handleResponseOther(response)
  {
    for (let param of ["otherAllowed1", "otherAllowed2"])
    {
      if (response.url.includes(param))
      {
        let element = document.createElement("div");
        element.setAttribute("data-expectedresult", "pass");
        element.innerHTML = `${param} was called.`;
        document.getElementById("other-target").appendChild(element);
      }
    }
  }

  setTimeout(() =>
  {
    removeWaitingContent(); // eslint-disable-line no-undef

    let url = "{{ site_url }}/testfiles/strip-fetch-query-parameter/foo.txt";
    fetch(`${url}?basicBlocked=1&basicAllowed=2`).then(handleResponseBasic);
    fetch(`${url}?otherAllowed1=1&otherAllowed2=2`).then(handleResponseOther);
  }, 500);
</script>
