template = testcase
title =  array-override
description = Check if array-override feature works properly.

{% set case = "array-override-push" %}
{% set id = get_id(case) %}
<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test that Array.prototype.push can be overridden properly.</p>
  <div id="{{id}}-area" class="testcase-area">
    <div class="testcase-examplecontent" aria-label="{{id}}-example">Example Content</div>
    <div class="testcase-waiting-content" aria-label="{{id}}-waiting">Waiting 500ms to trigger snippet...</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The red element in the test case above should be hidden.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>{{ site_url|domain }}#$#array-override push test123 </pre></li>
  </ul>
  <h3>Notes</h3>
  <p>Not supported in Chrome 73 (requires 74+)</p>
</section>

{% set case = "array-override-includes" %}
{% set id = get_id(case) %}
<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test that Array.prototype.includes can be overridden properly.</p>
  <div id="{{id}}-area" class="testcase-area">
    <div class="testcase-examplecontent" aria-label="{{id}}-example">Example Content</div>
    <div class="testcase-waiting-content" aria-label="{{id}}-waiting">Waiting 500ms to trigger snippet...</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The red element in the test case above should be hidden.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>{{ site_url|domain }}#$#array-override includes not-there true</pre></li>
  </ul>
  <h3>Notes</h3>
  <p>Not supported in Chrome 73 (requires 74+)</p>
</section>

<script>
  "use strict";

  const arr = ["included"];

  function createAndAppendDiv(parentId, divId) {
    let parentElement = document.getElementById(parentId);
    let newDiv = document.createElement("div");
    newDiv.id = divId;
    parentElement.appendChild(newDiv);
    return newDiv;
  }

  function setAttributeBasedOnCondition(element, id, condition) {
    element.setAttribute("data-expectedresult", condition ? "pass" : "fail");
    element.setAttribute("aria-label", condition ? `${id}-pass` : `${id}-fail`);
  }

  setTimeout(() => {
    arr.push("test123");
    arr.push("dont-touch");
  }, 100);

  setTimeout(() => {
    // Handle attributes for the first three properties
    const targetTestCasePush = createAndAppendDiv("array-override-push-area", "push");
    const pushWorks = arr.includes("dont-touch") && !arr.includes("test123");
    setAttributeBasedOnCondition(targetTestCasePush, "array-override-push", pushWorks);

    const targetTestCaseIncludes = createAndAppendDiv("array-override-includes-area", "push");
    const includesWorks = arr.includes("included") && arr.includes("not-there");
    setAttributeBasedOnCondition(targetTestCaseIncludes, "array-override-includes", includesWorks);
    removeWaitingContent(); // eslint-disable-line no-undef
  }, 500);
</script>
