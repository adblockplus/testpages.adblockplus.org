template = testcase
title =  JSON prune
description = Check if json-prune feature works properly.

{% set case = "json-prune" %}
{% set id = get_id(case) %}
<section class="testcase-panel">
  {{ heading(case) }}
  <p>Test that basic usage of the json-prune snippet works as expected..</p>
  <div class="testcase-area" id="testcase-area">
    <div class="testcase-examplecontent" aria-label="{{id}}-example">Example Content</div>
    <div class="testcase-waiting-content" aria-label="{{id}}-waiting">Waiting 500ms to trigger snippet...</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The red element in the test case above should be hidden.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>{{ site_url|domain }}#$#json-prune 'data-expectedresult jsonprune aria-label' </pre></li>
  </ul>
  <h3>Notes</h3>
  <p>Not supported in Chrome 73 (requires 74+)</p>
</section>

<script>
  "use strict";
  
  let propertiesToUse = '{"jsonprune": "true", "data-expectedresult": "fail", "aria-label":"json-prune-fail"}';
  let propertiesObject = JSON.parse(propertiesToUse);


  setTimeout(() => {
    removeWaitingContent(); // eslint-disable-line no-undef
    let targetTestCase = document.getElementById("testcase-area");
    let divToManipulate = document.createElement("div");
    divToManipulate.id = "fail";
    targetTestCase.appendChild(divToManipulate);

    if (propertiesObject) {
      for (let property in propertiesObject) {
        let attr = document.createAttribute(property);
        attr.value = propertiesObject[property];
        document.getElementById("fail").setAttributeNode(attr);
      }
    }
  }, 500);
</script>

