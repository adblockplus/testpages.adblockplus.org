template = testcase
title = hide-if-matches-computed-xpath
description = Check that the hide-if-matches-computed-xpath snippet is working as expected.

{% set case = "Hide when class changes dynamically based on a string found in another element" %}
{% set id = get_id(case) %}
<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test that basic usage of the snippet works as expected against target whose class changes after first load.</p>
  <div id="{{id}}-area"  class="testcase-area">
    <div class="testcase-examplecontent" aria-label="{{id}}-example">Example Content</div>
    <div class="testcase-waiting-content">Waiting 500ms to trigger snippet...</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The red element inside in the test case above should be hidden and the green one not hidden.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>{{ site_url|domain }}#$#hide-if-matches-computed-xpath '//div[@class="{{"{{"}}}}"]' '//span[@id="target1"]' '/himcx-simple.*/'</pre></li>
  </ul>
</section>

{% set case = "Hide when class matches regex group" %}
{% set id = get_id(case) %}
<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test that basic usage of the snippet works as expected against target whose class changes after first load.</p>
  <div id="{{id}}-area"  class="testcase-area">
    <div class="testcase-examplecontent" aria-label="{{id}}-example">Example Content</div>
    <div class="testcase-waiting-content">Waiting 500ms to trigger snippet...</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The red element inside in the test case above should be hidden and the green one not hidden.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>{{ site_url|domain }}#$#hide-if-matches-computed-xpath '//div[@class="{{"{{"}}}}"]/child::text()[contains(.,"Failed")]' '//span[@id="target2"]' '/test(.*)test/'</pre></li>
  </ul>
</section>


<script>
 "use strict";
  const randomInt = Math.floor(Math.random() * 20);

  setTimeout(() => {
    removeWaitingContent(); // eslint-disable-line no-undef

    // first test case
    const target1ClassName = "himcx-simple-" + randomInt;
    const testcaseArea1 = document.querySelectorAll(".testcase-area")[0];
    const newElement1 = document.createElement("div");
    newElement1.setAttribute("data-expectedresult", "fail");
    newElement1.classList.add(target1ClassName);
    newElement1.innerHTML = "Failed. Element is not hidden - ";
    testcaseArea1.appendChild(newElement1);
    
    const newElementChild1 = document.createElement("span");
    newElementChild1.innerHTML = target1ClassName;
    newElementChild1.setAttribute("id", "target1");
    
    newElement1.appendChild(newElementChild1);

    // second test case
    const target2ClassName = "himcx-regex-" + randomInt;
    const testcaseArea2 = document.querySelectorAll(".testcase-area")[1];
    const newElement2 = document.createElement("div");
    debugger;
    newElement2.setAttribute("data-expectedresult", "fail");
    newElement2.classList.add(target2ClassName);
    newElement2.innerHTML = "Failed. Element is not hidden - ";
    console.log(newElement2);
    testcaseArea2.appendChild(newElement2);
    
    const newElementChild2 = document.createElement("span");
    newElementChild2.innerHTML = `${target2ClassName}`;
    newElementChild2.setAttribute("id", "target2");
    newElement2.appendChild(newElementChild2);
    }, 1000);
</script>