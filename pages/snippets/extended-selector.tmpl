template = testcase
title = Extended selector to access shadow DOM elements
description = Check that the CSS selector's extended syntax is working as expected.

{% set case = "Simple closed shadow root with hide-if-contains" %}
{% set id = get_id(case) %}
<svg style="display: none;">
  <text id="svg1" y="14" style="fill: currentcolor; font-size: 16px; overflow: visible;">
    svg-test - Failed. Element is not hidden.
  </text>
</svg>
<svg style="display: none;"><use id="svg2" href="#svg1"></use></svg>
<svg style="display: none;">
    <text id="svg3" y="14" style="fill: currentcolor; font-size: 16px; overflow: visible;">
        <tspan>
            svg-test - Failed. Element is not hidden.
        </tspan>
    </text>
</svg>
<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test that basic usage of hide-if-contains works as expected against a closed shadow root.</p>
  <div id="{{id}}-area" class="testcase-area">
    <div class="testcase-examplecontent">Example Content</div>
    <div id="hic-simple-sh-id" data-expectedresult="fail"></div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The red element in the test case above should be hidden.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>{{ site_url|domain }}#$#hide-if-contains 'hic-simple-sh' 'div[id]' 'div[id] ^^sh^^ span'</pre></li>
  </ul>
</section>
<script type="text/javascript">
  const hicSimpleShTarget = document.getElementById("hic-simple-sh-id");
  const hicSimpleShRoot = hicSimpleShTarget.attachShadow({mode: "closed"});
  const child = document.createElement("span");
  child.innerHTML = "hic-simple-sh <br> Failed. Element is not hidden.";
  hicSimpleShRoot.appendChild(child);
</script>

{% set case = "Wrapping shadow root with hide-if-contains" %}
{% set id = get_id(case) %}
<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test that basic usage of hide-if-contains works as expected against a nested closed shadow root.</p>
  <div id="{{id}}-area" class="testcase-area">
    <div class="testcase-examplecontent">Example Content</div>
    <div id="hic-nested-sh-id" data-expectedresult="fail"></div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The red element added to the test case above should be hidden.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>{{ site_url|domain }}#$#hide-if-contains 'hic-nested-sh' 'div[id]' 'div[id] ^^sh^^ div ^^sh^^ span'</pre></li>
  </ul>
</section>
<script type="text/javascript">
  const hicNestedShTarget = document.getElementById("hic-nested-sh-id");
  const shadowRoot1 = hicNestedShTarget.attachShadow({mode: "closed"});
  const parent = document.createElement("div");
  shadowRoot1.appendChild(parent);
  const nestedChild = document.createElement('span');
  nestedChild.innerHTML = "hic-nested-sh <br> Failed. Element is not hidden.";
  const shadowRoot2 = parent.attachShadow({mode: 'closed'});
  shadowRoot2.appendChild(nestedChild);
</script>

{% set case = "Closed shadow root wraps several elements with hide-if-contains" %}
{% set id = get_id(case) %}
<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test that usage of hide-if-contains with the search parameter works as expected.</p>
  <div id="wrapping-sh-root" class="testcase-area"></div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The red element in the test case above should be hidden and the green one not hidden.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>{{ site_url|domain }}#$#hide-if-contains 'hic-wrapping-sh' 'div[id] ^^sh^^ div' </pre></li>
  </ul>
</section>

<script type="text/javascript">
  const wrappingElem = document.getElementById("wrapping-sh-root");
  const wrappingShadowRoot = wrappingElem.attachShadow({mode: 'closed'});

  const style = document.createElement('style');
  style.textContent = `
    :host .testcase-examplecontent,
    :host .testcase-expected-view,
    [data-expectedresult="pass"] {
      flex-grow: 1;
      padding: 0.5em;
      color: #fff;
      background-color: #0dc74b;
    }

    :host [data-expectedresult="fail"] {
      flex-grow: 1;
      padding: 0.5em;
      color: #fff;
      background-color: #c70d2c;
    }
  `;
  wrappingShadowRoot.appendChild(style);
  
  const testcaseExamplecontent = document.createElement('div');
  testcaseExamplecontent.classList.add('testcase-examplecontent');
  testcaseExamplecontent.textContent = "Example Content"
  wrappingShadowRoot.appendChild(testcaseExamplecontent);

  const testcaseContent = document.createElement('div');
  testcaseContent.classList.add('testcase-content');
  testcaseContent.setAttribute('data-expectedresult', 'fail');
  testcaseContent.innerHTML = 'hic-wrapping-sh <br> Failed. Element is not hidden.';
  wrappingShadowRoot.appendChild(testcaseContent);

  const testcaseExpectedView = document.createElement('div');
  testcaseExpectedView.classList.add('testcase-expected-view');
  testcaseExpectedView.setAttribute('data-expectedresult', 'pass');
  testcaseExpectedView.textContent = "Should not be hidden";
  wrappingShadowRoot.appendChild(testcaseExpectedView);
</script>


{% set case = "Simple svg-use pattern with hide-if-contains" %}
{% set id = get_id(case) %}

<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test that usage of hide-if-contains works as expected against a shadow DOM created with SVG.</p>
  <div id="{{id}}-area" class="testcase-area">
    <p class="testcase-examplecontent">Example Content</p>
    <p data-expectedresult="fail">
      <svg height="18"> <use href="#svg1"></use> </svg>
    </p>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The red elements in the test case above should be hidden and the green one not hidden.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>{{ site_url|domain }}#$#hide-if-contains 'svg-test' 'div[id] p' 'div[id] p svg use ^^svg^^'</pre></li>
  </ul>
</section>


{% set case = "Nested svg-use pattern with hide-if-contains" %}
{% set id = get_id(case) %}

<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test that usage of hide-if-contains works as expected against nested SVGs</p>
  <div id="{{id}}-area" class="testcase-area">
    <p class="testcase-examplecontent">Example Content</p>
    <p data-expectedresult="fail">
      <svg height="18"> <use href="#svg2"></use> </svg>
    </p>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The red elements in the test case above should be hidden and the green one not hidden.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>{{ site_url|domain }}#$#hide-if-contains 'svg-test' 'div[id] p' 'div[id] p svg use ^^svg^^ ^^svg^^'</pre></li>
  </ul>
</section>

{% set case = "Subtree in svg-use pattern with hide-if-contains" %}
{% set id = get_id(case) %}

<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test that usage of hide-if-contains works as expected against subtree within svg-use</p>
  <div id="{{id}}-area" class="testcase-area">
    <p class="testcase-examplecontent">Example Content</p>
    <p data-expectedresult="fail">
      <svg height="18"> <use href="#svg3"></use> </svg>
    </p>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The red elements in the test case above should be hidden and the green one not hidden.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>{{ site_url|domain }}#$#hide-if-contains 'svg-test' 'div[id] p' 'div[id] p svg use ^^svg^^ tspan'</pre></li>
  </ul>
</section>