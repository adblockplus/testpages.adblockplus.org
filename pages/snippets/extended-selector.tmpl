template = testcase
title = Extended selector to access shadow DOM elements
description = Check that the CSS selector's extended syntax is working as expected.

{% set case = "Simple closed shadow root with hide-if-contains" %}
{% set id = get_id(case) %}
<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test that basic usage of the snippet works as expected against a closed shadow root.</p>
  <div id="{{id}}-area" class="testcase-area">
    <div class="testcase-examplecontent" aria-label="{{id}}-example">Example Content</div>
        <div id="hic-static-id" data-expectedresult="fail"></div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The red element in the test case above should be hidden.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>{{ site_url|domain }}#$#hide-if-contains 'hic-simple-sh' 'div[id]' 'div[id] ^^sh^^ span'</pre></li>
  </ul>
</section>
<script type="text/javascript">
  const target = document.getElementById("hic-static-id");
  const shadowRoot = target.attachShadow({mode: "closed"});
  const child = document.createElement("span");
  child.innerHTML = "hic-simple-sh <br> Failed. Element is not hidden.";
  shadowRoot.appendChild(child);
</script>


{% set case = "Nested closed shadow root with hide-if-contains" %}
{% set id = get_id(case) %}
<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test that basic usage of the snippet works as expected against a nested closed shadow root.</p>
  <div id="basic-dynamic-target" class="testcase-area">
    <div class="testcase-examplecontent" aria-label="{{id}}-example">Example Content</div>
    <div class="testcase-waiting-content" aria-label="{{id}}-waiting">Waiting 500ms to trigger snippet...</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The red element added to the test case above should be hidden.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>{{ site_url|domain }}#$#hide-if-contains 'hic-basic-dynamic' p[id]</pre></li>
  </ul>
</section>

{% set case = "Search usage" %}
{% set id = get_id(case) %}
<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test that usage of the snippet with the search parameter works as expected.</p>
  <div id="search1-target" class="testcase-area">
    <div class="testcase-examplecontent" aria-label="{{id}}-example1">Example Content</div>
    <div class="testcase-waiting-content" aria-label="{{id}}-waiting">Waiting 500ms to trigger snippet...</div>
    <div class="testcase-expected-view">hic-search<br>Should not be hidden</div>
  </div>
  <div id="search2-target" class="testcase-area">
    <div class="testcase-examplecontent" aria-label="{{id}}-example2">Example Content</div>
    <div class="testcase-waiting-content">Waiting 500ms to trigger snippet...</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The red element in the test case above should be hidden and the green one not hidden.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>{{ site_url|domain }}#$#hide-if-contains 'hic-search' p[id] .target</pre></li>
  </ul>
</section>

<script>
  "use strict";

  function injectElement(id, element) {
    let target = document.getElementById(`${id}-target`);
    target.appendChild(element);
  }

  setTimeout(() => {
    removeWaitingContent(); // eslint-disable-line no-undef

    let dynamic = document.createElement("p");
    dynamic.id = "hic-dynamic-id";
    dynamic.innerHTML = "<div>hic-basic-dynamic<br>Failed. Element is not hidden.</div>";
    dynamic.setAttribute("data-expectedresult", "fail");


    let search1 = document.createElement("p");
    search1.id = Math.random().toString(36).substring(2);
    search1.setAttribute("data-expectedresult", "pass");
    search1.innerHTML = "hic-search<br>Should not be hidden";

    let search2 = document.createElement("p");
    search2.id = Math.random().toString(36).substring(2);
    search2.className = "target";
    search2.setAttribute("data-expectedresult", "fail");
    search2.innerHTML = "hic-search<br>Failed. Element is not hidden.";

    injectElement("basic-dynamic", dynamic);
    injectElement("search1", search1);
    injectElement("search2", search2);
  }, 500);
</script>

{% set case = "Regex usage" %}
{% set id = get_id(case) %}
<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test that usage of the snippet with regex works as expected.</p>
  <div id="{{id}}-area" class="testcase-area">
    <div class="testcase-examplecontent" aria-label="{{id}}-example">Example Content</div>
    <p class="testcase-expected-view">hic-regex-1<br>Should not be hidden</p>
    <p id="hic-regex-1" data-expectedresult="pass">hic-regex-1<br>Should not be hidden</p>
    <p id="hic-regex-2" data-expectedresult="fail" aria-label="{{id}}-fail">hic-regex-2<br>Failed. Element is not hidden.</p>
    <p id="hic-regex-3" data-expectedresult="fail" aria-label="{{id}}-fail">hic-regex-3<br>Failed. Element is not hidden.</p>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The red elements in the test case above should be hidden and the green one not hidden.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>{{ site_url|domain }}#$#hide-if-contains /hic-regex-[2-3]/ p[id]</pre></li>
  </ul>
</section>

{% set case = "Frame usage" %}
{% set id = get_id(case) %}
<section id="{{id}}-section" class="testcase-panel">
  {{ heading(case) }}
  <p>Test that usage of the snippet in a frame works as expected.</p>
  <div id="{{id}}-area" class="testcase-area">
    <iframe src="/testfiles/hide-if-contains/subdocument_expected.html" style="border: 0; width: 200px; height: 100px; flex-grow: 1; padding: 0.5em; background-color: #0dc74b;" class="testcase-expected-view"></iframe>
    <iframe src="/testfiles/hide-if-contains/subdocument.html" style="border: 0; width: 200px; height: 100px; flex-grow: 1;" data-expectedresult="pass"></iframe>
    <div class="testcase-examplecontent" aria-label="{{id}}-example">Example Content</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The red element in the test case above should be hidden.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="{{id}}-filters" class="testcase-filters">
    <li><pre>{{ site_url|domain }}#$#hide-if-contains hidden span#frame-target</pre></li>
  </ul>
</section>






template = testcase
title = hide-if-contains
description = Check that the hide-if-contains snippet is working as expected.
